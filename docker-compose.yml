version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nagatha_db
    environment:
      POSTGRES_DB: ${DB_NAME:-nagatha_dashboard}
      POSTGRES_USER: ${DB_USER:-nagatha}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-nagatha_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - nagatha_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nagatha} -d ${DB_NAME:-nagatha_dashboard}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: nagatha_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nagatha_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Django Web Application
  web:
    build: .
    container_name: nagatha_web
    environment:
      - DEBUG=${DEBUG:-False}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DB_NAME=${DB_NAME:-nagatha_dashboard}
      - DB_USER=${DB_USER:-nagatha}
      - DB_PASSWORD=${DB_PASSWORD:-nagatha_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0,web,nginx}
      - NAGATHA_DATABASE_URL=${NAGATHA_DATABASE_URL:-sqlite:///nagatha.db}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
      - ./src:/app/nagatha_src:ro
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nagatha_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 web_dashboard.wsgi:application"

  # Celery Worker for background tasks
  celery:
    build: .
    container_name: nagatha_celery
    environment:
      - DEBUG=${DEBUG:-False}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DB_NAME=${DB_NAME:-nagatha_dashboard}
      - DB_USER=${DB_USER:-nagatha}
      - DB_PASSWORD=${DB_PASSWORD:-nagatha_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NAGATHA_DATABASE_URL=${NAGATHA_DATABASE_URL:-sqlite:///nagatha.db}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - logs_volume:/app/logs
      - ./src:/app/nagatha_src:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nagatha_network
    restart: unless-stopped
    command: celery -A web_dashboard worker --loglevel=info --concurrency=2
    healthcheck:
      test: ["CMD", "celery", "-A", "web_dashboard", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat for scheduled tasks
  celery-beat:
    build: .
    container_name: nagatha_celery_beat
    environment:
      - DEBUG=${DEBUG:-False}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DB_NAME=${DB_NAME:-nagatha_dashboard}
      - DB_USER=${DB_USER:-nagatha}
      - DB_PASSWORD=${DB_PASSWORD:-nagatha_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NAGATHA_DATABASE_URL=${NAGATHA_DATABASE_URL:-sqlite:///nagatha.db}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - logs_volume:/app/logs
      - ./src:/app/nagatha_src:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nagatha_network
    restart: unless-stopped
    command: celery -A web_dashboard beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Nginx reverse proxy and static file server
  nginx:
    image: nginx:alpine
    container_name: nagatha_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx.site.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - logs_volume:/var/log/nagatha:ro
    depends_on:
      - web
    networks:
      - nagatha_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  nagatha_network:
    driver: bridge